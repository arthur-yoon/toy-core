//    gradle 의존성 옵션들
//
//    implementation: 의존 라이브러리 수정시 본 모듈까지만 재빌드
//      본 모듈을 의존하는 모듈은 해당 라이브러리의 api 를 사용할 수 없음
//    api: 의존 라이브러리 수정시 본 모듈을 의존하는 모듈들도 재빌드
//      본 모듈을 의존하는 모듈들도 해당 라이브러리의 api 를 사용할 수 있음
//    compileOnly: compile 시에만 빌드하고 빌드 결과물에는 포함하지 않음
//      runtime 시 필요없는 라이브러리인 경우 (runtime 환경에 이미 라이브러리가 제공되고 있는가 하는 등의 경우)
//      참고: https://blog.gradle.org/introducing-compile-only-dependencies
//    runtimeOnly: runtime 시에만 필요한 라이브러리인 경우
//    annotationProcessor: annotation processor 명시 (gradle 4.6)
//      참고:
//          https://docs.gradle.org/4.6/release-notes.html
//          https://blog.gradle.org/incremental-compiler-avoidance#about-annotation-processors
//          Annotation processing 이 필요없다고 예측되는 경우 빌드 제외


plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'
}

group = 'com.dev'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '13'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.12.Final'
    // https://mvnrepository.com/artifact/com.vladmihalcea/hibernate-types-52
    compile group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.9.3'
    compile 'com.querydsl:querydsl-jpa'
    compile 'com.querydsl:querydsl-apt'
    compileClasspath 'gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10'
    // https://mvnrepository.com/artifact/org.modelmapper.extensions/modelmapper-spring
    compile group: 'org.modelmapper.extensions', name: 'modelmapper-spring', version: '2.3.6'
    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.10.5'
    // https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf
    compile group: 'org.thymeleaf', name: 'thymeleaf', version: '3.0.11.RELEASE'
    // https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5
    compile group: 'org.thymeleaf', name: 'thymeleaf-spring5', version: '3.0.11.RELEASE'
    // https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4
    compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity4', version: '3.0.4.RELEASE'
    // https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect
    compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version: '2.4.1'
    implementation 'org.flywaydb:flyway-core'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-joda
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: '2.10.2'
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.4.0'

    compile 'mysql:mysql-connector-java'
    runtime 'org.mariadb.jdbc:mariadb-java-client:2.3.0'

//    ######################################################################################
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    //     https://mvnrepository.com/artifact/org.hamcrest/hamcrest
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
// todo 이걸 사용해야 하는지?
//apply plugin: "com.ewerk.gradle.plugins.querydsl"

def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}
